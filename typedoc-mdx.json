{
  "src/foundation/styles/GlobalScrollBarStyle/GlobalScrollBarStyle.tsx": {
    "name": "API Reference/Styles/GlobalScrollBarStyle",
    "title": "GlobalScrollBarStyle"
  },
  "src/foundation/styles/colorManipulator.ts": {
    "name": "API Reference/Styles/colorManipulator",
    "title": "colorManipulator"
  },
  "src/foundation/styles/ellipsis.ts": {
    "name": "API Reference/Styles/ellipsis",
    "title": "ellipsis"
  },
  "src/foundation/styles/fakeBorder.ts": {
    "name": "API Reference/Styles/fakeBorder",
    "title": "fakeBorder"
  },
  "src/foundation/styles/flexCenter.ts": {
    "name": "API Reference/Styles/flexCenter",
    "title": "flexCenter"
  },
  "src/foundation/styles/flexWidth.ts": {
    "name": "API Reference/Styles/flexWidth",
    "title": "flexWidth"
  },
  "src/foundation/styles/focusVisible.ts": {
    "name": "API Reference/Styles/focusVisible",
    "title": "focusVisible"
  },
  "src/foundation/styles/lineClamp.ts": {
    "name": "API Reference/Styles/lineClamp",
    "title": "lineClamp"
  },
  "src/foundation/styles/newPalette.ts": {
    "name": "API Reference/Styles/newPalette",
    "title": "newPalette"
  },
  "src/foundation/styles/nonStyleButton.ts": {
    "name": "API Reference/Styles/nonStyleButton",
    "title": "nonStyleButton"
  },
  "src/foundation/styles/nonTouchHoverMedia.ts": {
    "name": "API Reference/Styles/nonTouchHoverMedia",
    "title": "nonTouchHoverMedia"
  },
  "src/foundation/styles/opacity.ts": {
    "name": "API Reference/Styles/opacity",
    "title": "opacity"
  },
  "src/foundation/styles/paletteContrastText.ts": {
    "name": "API Reference/Styles/paletteContrastText",
    "title": "paletteContrastText"
  },
  "src/foundation/styles/px.ts": {
    "name": "API Reference/Styles/px",
    "title": "px"
  },
  "src/foundation/styles/radius.ts": {
    "name": "API Reference/Styles/radius",
    "title": "radius"
  },
  "src/foundation/styles/shadows.ts": {
    "name": "API Reference/Styles/shadows",
    "title": "shadows"
  },
  "src/foundation/styles/spacing.ts": {
    "name": "API Reference/Styles/spacing",
    "title": "spacing"
  },
  "src/foundation/styles/typography.ts": {
    "name": "API Reference/Styles/typography",
    "title": "typography"
  },
  "src/foundation/styles/zIndex.ts": {
    "name": "API Reference/Styles/zIndex",
    "title": "zIndex"
  },
  "src/foundation/hooks/useAudio/useAudio.ts": {
    "name": "API Reference/Hooks/useAudio",
    "title": "useAudio"
  },
  "src/foundation/hooks/useInterval/useInterval.ts": {
    "name": "API Reference/Hooks/useInterval",
    "title": "useInterval"
  },
  "src/foundation/hooks/useA11yKeyEvent/useA11yKeyEvent.ts": {
    "name": "API Reference/Hooks/useA11yKeyEvent",
    "title": "useA11yKeyEvent"
  },
  "src/foundation/hooks/useAnnouncer/useAnnouncer.tsx": {
    "name": "API Reference/Hooks/useAnnouncer",
    "title": "useAnnouncer"
  },
  "src/foundation/hooks/useChange/useChange.ts": {
    "name": "API Reference/Hooks/useChange",
    "title": "useChange"
  },
  "src/foundation/hooks/useDebounce/useDebounce.ts": {
    "name": "API Reference/Hooks/useDebounce",
    "title": "useDebounce"
  },
  "src/foundation/hooks/useEventCallback/useEventCallback.ts": {
    "name": "API Reference/Hooks/useEventCallback",
    "title": "useEventCallback"
  },
  "src/foundation/hooks/useEventListener/useEventListener.ts": {
    "name": "API Reference/Hooks/useEventListener",
    "title": "useEventListener"
  },
  "src/foundation/hooks/useForceUpdate/useForceUpdate.ts": {
    "name": "API Reference/Hooks/useForceUpdate",
    "title": "useForceUpdate"
  },
  "src/foundation/hooks/useForkRef/useForkRef.ts": {
    "name": "API Reference/Hooks/useForkRef",
    "title": "useForkRef"
  },
  "src/foundation/hooks/useId/useId.ts": {
    "name": "API Reference/Hooks/useId",
    "title": "useId"
  },
  "src/foundation/hooks/useKeyDownOnce/useKeyDownOnce.ts": {
    "name": "API Reference/Hooks/useKeyDownOnce",
    "title": "useKeyDownOnce"
  },
  "src/foundation/hooks/useKeyboardMoveFocus/moveIndexInTwoDimension.tsx": {
    "name": "API Reference/Hooks/moveIndexInTwoDimension",
    "title": "moveIndexInTwoDimension"
  },
  "src/foundation/hooks/useKeyboardMoveFocus/useKeyboardMoveFocus.ts": {
    "name": "API Reference/Hooks/useKeyboardMoveFocus",
    "title": "useKeyboardMoveFocus"
  },
  "src/foundation/hooks/useKeyboardMoveFocus/useOnlyOneFocusable.ts": {
    "name": "API Reference/Hooks/useOnlyOneFocusable",
    "title": "useOnlyOneFocusable"
  },
  "src/foundation/hooks/useLongPress/useLongPress.ts": {
    "name": "API Reference/Hooks/useLongPress",
    "title": "useLongPress"
  },
  "src/foundation/hooks/useMountState/useMountState.ts": {
    "name": "API Reference/Hooks/useMountState",
    "title": "useMountState"
  },
  "src/foundation/hooks/useOnReRender/useOnReRender.ts": {
    "name": "API Reference/Hooks/useOnReRender",
    "title": "useOnReRender"
  },
  "src/foundation/hooks/useOverflow/useOverflow.ts": {
    "name": "API Reference/Hooks/useOverflow",
    "title": "useOverflow"
  },
  "src/foundation/hooks/usePrevious/usePrevious.ts": {
    "name": "API Reference/Hooks/usePrevious",
    "title": "usePrevious"
  },
  "src/foundation/hooks/useRefState/useRefState.ts": {
    "name": "API Reference/Hooks/useRefState",
    "title": "useRefState"
  },
  "src/foundation/hooks/useResizeObserver/useResizeObserver.ts": {
    "name": "API Reference/Hooks/useResizeObserver",
    "title": "useResizeObserver"
  },
  "src/foundation/hooks/useResponsiveMatch/useResponsiveMatch.ts": {
    "name": "API Reference/Hooks/useResponsiveMatch",
    "title": "useResponsiveMatch"
  },
  "src/foundation/hooks/useResultRef/useResultRef.ts": {
    "name": "API Reference/Hooks/useResultRef",
    "title": "useResultRef"
  },
  "src/foundation/hooks/useRetry/useRetry.ts": {
    "name": "API Reference/Hooks/useRetry",
    "title": "useRetry"
  },
  "src/foundation/hooks/useSleep/useSleep.ts": {
    "name": "API Reference/Hooks/useSleep",
    "title": "useSleep"
  },
  "src/foundation/hooks/useThrottle/useThrottle.ts": {
    "name": "API Reference/Hooks/useThrottle",
    "title": "useThrottle"
  },
  "src/foundation/hooks/useTouchMouseEvent/useTouchMouseEvent.ts": {
    "name": "API Reference/Hooks/useTouchMouseEvent",
    "title": "useTouchMouseEvent"
  },
  "src/foundation/theme/ThemeSwitcherProvider/ThemeSwitcherProvider.tsx": {
    "name": "API Reference/theme/ThemeSwitcherProvider",
    "title": "ThemeSwitcherProvider"
  },
  "src/foundation/theme/ThemeSwitcherProvider/useThemeSwitcher.ts": {
    "name": "API Reference/theme/useThemeSwitcher",
    "title": "useThemeSwitcher"
  },
  "src/foundation/theme/useThemeProps.ts": {
    "name": "API Reference/theme/useThemeProps",
    "title": "useThemeProps"
  },
  "src/foundation/hoc/withDelay/withDelay.tsx": {
    "name": "API Reference/Hoc/withDelay",
    "title": "withDelay"
  },
  "src/foundation/hoc/withResponsive/withResponsive.tsx": {
    "name": "API Reference/Hoc/withResponsive",
    "title": "withResponsive"
  },
  "src/foundation/utils/classes.ts": {
    "name": "API Reference/Utils/classes",
    "title": "classes"
  },
  "src/foundation/utils/combineProps.ts": {
    "name": "API Reference/Utils/combineProps",
    "title": "combineProps"
  },
  "src/foundation/utils/deepmerge.ts": {
    "name": "API Reference/Utils/deepmerge",
    "title": "deepmerge"
  },
  "src/foundation/utils/getScrollbarSize.ts": {
    "name": "API Reference/Utils/getScrollbarSize",
    "title": "getScrollbarSize"
  },
  "src/foundation/utils/hasValue.ts": {
    "name": "API Reference/Utils/hasValue",
    "title": "hasValue"
  },
  "src/foundation/utils/isRcElement.ts": {
    "name": "API Reference/Utils/isRcElement",
    "title": "isRcElement"
  },
  "src/foundation/utils/isRef.ts": {
    "name": "API Reference/Utils/isRef",
    "title": "isRef"
  },
  "src/foundation/utils/isUrl.ts": {
    "name": "API Reference/Utils/isUrl",
    "title": "isUrl"
  },
  "src/foundation/utils/omit.ts": {
    "name": "API Reference/Utils/omit",
    "title": "omit"
  },
  "src/foundation/utils/outerSize.ts": {
    "name": "API Reference/Utils/outerSize",
    "title": "outerSize"
  },
  "src/foundation/utils/parseColor.ts": {
    "name": "API Reference/Utils/parseColor",
    "title": "parseColor"
  },
  "src/foundation/utils/pick.ts": {
    "name": "API Reference/Utils/pick",
    "title": "pick"
  },
  "src/foundation/utils/preloadImg.ts": {
    "name": "API Reference/Utils/preloadImg",
    "title": "preloadImg"
  },
  "src/foundation/utils/removeClassName.tsx": {
    "name": "API Reference/Utils/removeClassName",
    "title": "removeClassName"
  },
  "src/foundation/utils/selectionHandler.ts": {
    "name": "API Reference/Utils/selectionHandler",
    "title": "selectionHandler"
  },
  "src/foundation/utils/shallowEqual.ts": {
    "name": "API Reference/Utils/shallowEqual",
    "title": "shallowEqual"
  },
  "src/foundation/utils/styleParser.ts": {
    "name": "API Reference/Utils/styleParser",
    "title": "styleParser"
  },
  "src/foundation/utils/swapArrayLocs.ts": {
    "name": "API Reference/Utils/swapArrayLocs",
    "title": "swapArrayLocs"
  },
  "src/foundation/config.ts": {
    "name": "API Reference/Utils/config",
    "title": "config"
  },
  "src/foundation/typings/BaseColor.ts": {
    "name": "API Reference/Typings/BaseColor",
    "title": "BaseColor"
  },
  "src/foundation/typings/BaseDirection.ts": {
    "name": "API Reference/Typings/BaseDirection",
    "title": "BaseDirection"
  },
  "src/foundation/typings/BaseFormControlLabel.ts": {
    "name": "API Reference/Typings/BaseFormControlLabel",
    "title": "BaseFormControlLabel"
  },
  "src/foundation/typings/BaseLabelPlacement.ts": {
    "name": "API Reference/Typings/BaseLabelPlacement",
    "title": "BaseLabelPlacement"
  },
  "src/foundation/typings/BaseProps.ts": {
    "name": "API Reference/Typings/BaseProps",
    "title": "BaseProps"
  },
  "src/foundation/typings/BaseSize.ts": {
    "name": "API Reference/Typings/BaseSize",
    "title": "BaseSize"
  },
  "src/foundation/typings/UnionOmit.ts": {
    "name": "API Reference/Typings/UnionOmit",
    "title": "UnionOmit"
  },
  "src/foundation/typings/UnitMap.ts": {
    "name": "API Reference/Typings/UnitMap",
    "title": "UnitMap"
  },
  "src/foundation/typings/deepPartial.ts": {
    "name": "API Reference/Typings/deepPartial",
    "title": "deepPartial"
  },
  "src/foundation/typings/notNullRecord.ts": {
    "name": "API Reference/Typings/notNullRecord",
    "title": "notNullRecord"
  }
}
